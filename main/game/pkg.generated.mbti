// Generated using `moon info`, DON'T EDIT IT
package "Lampese/MGPIC_2025/game"

import(
  "Lampese/MGPIC_2025/resource"
  "Lampese/MGPIC_2025/structure"
  "moonbitlang/core/set"
)

// Values
fn animate_move(Int) -> Unit

fn animate_reset() -> Unit

fn broadcast_room_content(Room) -> Unit

fn change_direction(Int, UnitDirection) -> Unit

fn clear_block((Int, Int)) -> Unit

fn clear_state(Int) -> Unit

fn cost_drop_item(Array[(Item, Double)]) -> Item?

fn display_can_attack(Int, Bool) -> Unit

fn display_can_move(Int, Bool) -> Unit

fn eventloop(String) -> Unit

fn handle_on_attack_apply(Int, (Int, Int), Map_) -> Unit

fn handle_on_attack_end() -> Unit

fn handle_on_attack_start(Map_, Int) -> Unit

fn handle_on_click_copper(Int) -> Unit

fn handle_on_copper_drop_item(Int, Int) -> Unit

fn handle_on_copper_equip_item(Int, Int) -> Unit

fn handle_on_copper_pick_up(Int, Int) -> Unit

fn handle_on_copper_unequip_item(Int, Int) -> Unit

fn handle_on_game_start(Array[Int]) -> Unit

fn handle_on_move_apply(Int, (Int, Int), Map_) -> Unit

fn handle_on_move_end() -> Unit

fn handle_on_move_start(Map_, Int) -> Unit

fn handle_on_transfer_apply((Int, Int)) -> Unit

fn handle_on_transfer_end() -> Unit

fn handle_on_transfer_start(Int, Int, Int) -> Unit

fn move_to(Int, (Int, Int)) -> Unit

fn put_map_block((Int, Int)) -> Unit

fn remove_unit(Int) -> Unit

fn set_attack_block((Int, Int)) -> Unit

fn set_copper(BattleCopper, Int, (Int, Int)) -> Unit

fn set_enemy(Enemy, Int, (Int, Int)) -> Unit

fn set_material(Material, Int, (Int, Int)) -> Unit

fn set_move_block((Int, Int)) -> Unit

fn set_structure(@structure.Structure, Int, (Int, Int)) -> Unit

fn test_blocks() -> Unit

fn test_camera_control() -> Unit

fn test_camera_reset() -> Unit

fn test_clear_states() -> Unit

fn test_display_states() -> Unit

fn test_remove() -> Unit

fn test_sequence() -> Unit

fn test_simple_move() -> Unit

// Errors

// Types and methods
type BattleCopper
fn BattleCopper::to_json(Self) -> Json // from trait `ToJson`
impl ToJson for BattleCopper

type CanAttackTarget
fn CanAttackTarget::to_json(Self) -> Json // from trait `ToJson`
impl ToJson for CanAttackTarget

type Direction

pub struct Enemy {
  id : Int
  position : (Int, Int)
  mut now_health : Float
  enemy_base : EnemyBase
}
fn Enemy::to_json(Self) -> Json // from trait `ToJson`
impl ToJson for Enemy

type EnemyBase
fn EnemyBase::to_json(Self) -> Json // from trait `ToJson`
impl ToJson for EnemyBase

type Game

type Inventory
fn Inventory::add_item(Self, Item) -> Unit
fn Inventory::check_can_add_item(Self, ItemType) -> Bool
fn Inventory::check_resource_in_inventory(Self, @resource.ResourceType) -> Bool
fn Inventory::craft(Self) -> Bool
fn Inventory::new(Int) -> Self
fn Inventory::remove_item(Self, Int) -> Item?
fn Inventory::to_json(Self) -> Json // from trait `ToJson`
impl ToJson for Inventory

type Item
fn Item::equal(Self, Self) -> Bool // from trait `Eq`
fn Item::new(ItemType, count? : Int) -> Self
#deprecated
fn Item::op_equal(Self, Self) -> Bool // from trait `Eq`
fn Item::to_json(Self) -> Json // from trait `ToJson`
impl Eq for Item
impl ToJson for Item

type ItemType
fn ItemType::equal(Self, Self) -> Bool // from trait `Eq`
#deprecated
fn ItemType::op_equal(Self, Self) -> Bool // from trait `Eq`
fn ItemType::to_json(Self) -> Json // from trait `ToJson`
impl Eq for ItemType
impl ToJson for ItemType

type MapBlock
fn MapBlock::new() -> Self

type Map_

type Material
fn Material::to_json(Self) -> Json // from trait `ToJson`
impl ToJson for Material

type Occupant

type Room
fn Room::get_room_direction_and_new_position(Self, (Int, Int)) -> (Direction, (Int, Int))
fn Room::is_coord_in_room(Self, (Int, Int)) -> Bool
fn Room::new(Int, (Int, Int), @set.Set[(Int, Int)]) -> Self
fn Room::position_to_global_position(Self, (Int, Int)) -> (Int, Int)

type UnitDirection
fn UnitDirection::output(Self, &Logger) -> Unit // from trait `Show`
fn UnitDirection::to_string(Self) -> String // from trait `Show`
impl Show for UnitDirection

// Type aliases

// Traits

