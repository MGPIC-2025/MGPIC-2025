// Generated using `moon info`, DON'T EDIT IT
package "Lampese/MGPIC_2025/coppers"

import(
  "Lampese/MGPIC_2025/attribute"
  "Lampese/MGPIC_2025/equipment"
  "Lampese/MGPIC_2025/resource"
)

// Values
let copper_info_list : FixedArray[CopperInfo]

let copper_info_map : Map[String, CopperInfo]

fn get_default_attribute(CopperType) -> @attribute.Attribute

fn get_upgrade_cost(Int) -> @resource.ResourceCost

fn get_upgrade_effect(Copper) -> @attribute.Attribute

fn summon_copper_from_info(String) -> Copper

// Errors

// Types and methods
pub(all) struct Copper {
  id : Int
  level : Int
  suffix : Int
  live_left : Int
  attribute : @attribute.Attribute
  copper_type : CopperType
  equipment_slot : EquipmentSlot
  copper_info : CopperInfo
}
fn Copper::apply_upgrade(Self) -> Self
fn Copper::to_json(Self) -> Json // from trait `ToJson`
impl ToJson for Copper

pub struct CopperInfo {
  name : String
  copper_type : CopperType
  description : String
  icon_url : String
  model_url : String
  skill : Skill?
}
fn CopperInfo::to_json(Self) -> Json // from trait `ToJson`
impl ToJson for CopperInfo

pub enum CopperType {
  IronWall
  Arcanist
  CraftsMan
  Mechanic
  Resonator
}
fn CopperType::to_json(Self) -> Json // from trait `ToJson`
impl ToJson for CopperType

type EquipmentSlot
fn EquipmentSlot::equip(Self, @equipment.Equipment) -> (Self, Bool)
fn EquipmentSlot::new() -> Self
fn EquipmentSlot::to_json(Self) -> Json // from trait `ToJson`
fn EquipmentSlot::unlock_slot2(Self) -> Self
impl ToJson for EquipmentSlot

type Skill
fn Skill::to_json(Self) -> Json // from trait `ToJson`
impl ToJson for Skill

// Type aliases

// Traits

