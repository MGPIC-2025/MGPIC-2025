name: Deploy to GitHub Pages

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

# 设置权限
permissions:
  contents: read
  pages: write
  id-token: write

# 并发控制
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  # 构建和部署到 GitHub Pages
  build-and-deploy:
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: 'package.json'

      - name: Install MoonBit
        run: |
          # 使用官方安装脚本
          curl -fsSL https://cli.moonbitlang.com/install/unix.sh | bash
          
          # 添加到 PATH
          echo "$HOME/.moon/bin" >> $GITHUB_PATH
          
          # 验证安装
          $HOME/.moon/bin/moon help

      - name: Install dependencies
        run: |
          # 删除可能存在的 lock 文件和 node_modules
          rm -rf package-lock.json node_modules
          # 重新安装依赖
          npm install

      - name: Build project
        run: |
          echo "开始构建项目..."
          # 先尝试完整构建
          npm run build || {
            echo "完整构建失败，尝试纯 Web 构建..."
            npm run build:web
          }
          echo "构建完成，检查 dist 目录..."
          ls -la dist/
          echo "dist 目录大小:"
          du -sh dist/
          echo "构建步骤完成！"
        env:
          NODE_ENV: production
          VITE_R2_PUBLIC_URL: https://pub-6f9181bda40946ea92b5e87fe84e27d4.r2.dev

      - name: Add .nojekyll file
        run: |
          echo "添加 .nojekyll 文件到 dist 目录..."
          touch dist/.nojekyll
          echo ".nojekyll 文件已添加"
          ls -la dist/

      - name: Setup Pages
        uses: actions/configure-pages@v4

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: './dist'

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

      - name: Check deployment status
        run: |
          echo "GitHub Pages 部署状态:"
          echo "部署 ID: ${{ steps.deployment.outputs.deployment_id }}"
          echo "部署 URL: ${{ steps.deployment.outputs.page_url }}"

  # 上传资源到 Cloudflare R2
  upload-assets:
    runs-on: ubuntu-latest
    needs: build-and-deploy
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: 'package.json'

      - name: Install dependencies
        run: |
          # 删除可能存在的 lock 文件和 node_modules
          rm -rf package-lock.json node_modules
          # 重新安装依赖
          npm install

      - name: Upload assets to R2
        run: npm run deploy:assets:smart
        env:
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          CLOUDFLARE_R2_ACCESS_KEY_ID: ${{ secrets.CLOUDFLARE_R2_ACCESS_KEY_ID }}
          CLOUDFLARE_R2_SECRET_ACCESS_KEY: ${{ secrets.CLOUDFLARE_R2_SECRET_ACCESS_KEY }}
          CLOUDFLARE_R2_BUCKET_NAME: ${{ secrets.CLOUDFLARE_R2_BUCKET_NAME }}
